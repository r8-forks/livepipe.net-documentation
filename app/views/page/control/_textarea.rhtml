<% textarea_css = capture do %>
	#markdown_example {
		width:100%;
		height:200px;
	}

	#markdown_toolbar {
		position:relative;
		list-style:none;
		border:1px solid #d7d7d7;
		background-color:#F6F6F6;
		margin:0;
		padding:0;
		height:18px;
		margin-bottom:2px;
	}

	#markdown_toolbar li {
		list-style:none;
		margin:0;
		padding:0;
		float:left;
	}

	#markdown_toolbar li a {
		width:24px;
		height:16px;
		float:left;
		display:block;
		background-image:url("/stylesheets/markdown_icons.gif");
		border:1px solid #fff;
		border-right-color:#d7d7d7;
	}

	#markdown_toolbar li a:hover {
		border-color:#900;
	}

	#markdown_toolbar li span {
		display:none;
	}

	#markdown_toolbar li a#markdown_help_button {
		position:absolute;
		top:0;
		right:0;
		border-left-color:#d7d7d7;
		border-right-color:#fff;
	}

	#markdown_toolbar li a#markdown_help_button:hover {
		border-left-color:#900;
		border-right-color:#900;
	}

	#markdown_italics_button { background-position: 0 -119px; }
	#markdown_bold_button { background-position: 0 -102px; }
	#markdown_link_button { background-position: 0 0; }
	#markdown_image_button { background-position: 0 -170px; }
	#markdown_unordered_list_button { background-position: 0 -34px; }
	#markdown_ordered_list_button { background-position: 0 -51px; }
	#markdown_quote_button { background-position: 0 -68px; }
	#markdown_code_button { background-position: 0 -136px; }
	#markdown_help_button { background-position: 0 -153px; }
	#markdown_heading_button { background-position: 0 -85px; }
<% end %>

<% textarea_js = capture do %>
	//setup
	var textarea = new Control.TextArea('markdown_example');
	var toolbar = new Control.TextArea.ToolBar(textarea);
	toolbar.container.id = 'markdown_toolbar'; //for css styles
	
	//preview of markdown text
	var converter = new Showdown.converter;
	var converter_callback = function(value){
		$('markdown_formatted').update(converter.makeHtml(value));
	}
	converter_callback(textarea.getValue());
	textarea.observe('change',converter_callback);
	
	//buttons
	toolbar.addButton('Italics',function(){
		this.wrapSelection('*','*');
	},{
		id: 'markdown_italics_button'
	});
	
	toolbar.addButton('Bold',function(){
		this.wrapSelection('**','**');
	},{
		id: 'markdown_bold_button'
	});
	
	toolbar.addButton('Link',function(){
		var selection = this.getSelection();
		var response = prompt('Enter Link URL','');
		if(response == null)
			return;
		this.replaceSelection('[' + (selection == '' ? 'Link Text' : selection) + '](' + (response == '' ? 'http://link_url/' : response).replace(/^(?!(f|ht)tps?:\/\/)/,'http://') + ')');
	},{
		id: 'markdown_link_button'
	});
	
	toolbar.addButton('Image',function(){
		var selection = this.getSelection();
		var response = prompt('Enter Image URL','');
		if(response == null)
			return;
		this.replaceSelection('![' + (selection == '' ? 'Image Alt Text' : selection) + '](' + (response == '' ? 'http://image_url/' : response).replace(/^(?!(f|ht)tps?:\/\/)/,'http://') + ')');
	},{
		id: 'markdown_image_button'
	});
	
	toolbar.addButton('Heading',function(){
		var selection = this.getSelection();
		if(selection == '')
			selection = 'Heading';
		this.replaceSelection("\n" + selection + "\n" + $R(0,Math.max(5,selection.length)).collect(function(){'-'}).join('') + "\n");
	},{
		id: 'markdown_heading_button'
	});
	
	toolbar.addButton('Unordered List',function(event){
		this.collectFromEachSelectedLine(function(line){
			return event.shiftKey ? (line.match(/^\*{2,}/) ? line.replace(/^\*/,'') : line.replace(/^\*\s/,'')) : (line.match(/\*+\s/) ? '*' : '* ') + line;
		});
	},{
		id: 'markdown_unordered_list_button'
	});
	
	toolbar.addButton('Ordered List',function(event){
		var i = 0;
		this.collectFromEachSelectedLine(function(line){
			if(!line.match(/^\s+$/)){
				++i;
				return event.shiftKey ? line.replace(/^\d+\.\s/,'') : (line.match(/\d+\.\s/) ? '' : i + '. ') + line;
			}
		});
	},{
		id: 'markdown_ordered_list_button'
	});
	
	toolbar.addButton('Block Quote',function(event){
		this.collectFromEachSelectedLine(function(line){
			return event.shiftKey ? line.replace(/^\> /,'') : '> ' + line;
		});
	},{
		id: 'markdown_quote_button'
	});
	
	toolbar.addButton('Code Block',function(event){
		this.collectFromEachSelectedLine(function(line){
			return event.shiftKey ? line.replace(/    /,'') : '    ' + line;
		});
	},{
		id: 'markdown_code_button'
	});
	
	toolbar.addButton('Help',function(){
		window.open('http://daringfireball.net/projects/markdown/dingus');
	},{
		id: 'markdown_help_button'
	});
<% end %>

<% content_for :head do %>
	<style>
		<%= textarea_css %>
	</style>
	<script src="/javascripts/showdown.js"></script>
	<script>
		document.observe('dom:loaded',function(){
			<%= textarea_js %>
		});
	</script>
<% end %>

<%= header 'Control.TextArea' %>
<%= introduction 'Cross browser textarea manipulation for Prototype.' %>
<% @title = 'Control.TextArea : Cross browser textarea manipulation for Prototype' %>

<% tabs 'main_tabs' do |tabs| %>
	<% tabs.tab 'tutorial', 'Tutorial' %>
	<% tabs.tab 'api', 'API' %>
	<% tabs.source 'http://github.com/syntacticx/livepipe-ui/tree/master/src/textarea.js' %>
<% end %>

<% section 'tutorial' do %>
	<%= subhead 'Introduction' %>
	<p>WYSIWYG editing in the browser is still difficult to integrate or extend, and generated markup is often suspect. In the meantime a crop of text formatting languages such as Markdown, Textile, BBCode and wiki markup have emerged as ways for users to enter rich content in a controlled enviornment.</p>
	<p>Control.TextArea provides a text selection and manipulation API, as well as a simple toolbar API, but leaves the application integration and feature set to the developer.</p>
	<%= subhead 'Example for Markdown' %>
	<textarea id="markdown_example">Select some text or enter your own, and play with the buttons above.</textarea>
	<%= subhead 'Preview' %>
	<div id="markdown_formatted"></div>
	<% html 'HTML' do %><% textarea_html = capture do %>
		<textarea id="markdown_example"></textarea>
		<div id="markdown_formatted"></div>
	<% end %><%= encode_entities textarea_html %><% end %>
	<% javascript 'JavaScript' do %><%= textarea_js %><% end %>
	<% css 'CSS' do %><%= textarea_css %><% end %>
<% end %>

<% section 'api' do %>
	<% paragraph 'DOM Modifications' do %><b>Control.TextArea.Toolbar.initialize()</b> will insert a <b>div</b> which contains the toolbar before the textarea which belongs to the Control.TextArea instance you pass in.<% end %>
	<% api_table 'Class' do |api| %>
		<% api.item :returns => 'number', :signature => 'onChangeTimeoutLength', :description => 'Length of time before the change event is triggered.' %>
	<% end %>
	<% api_table 'Instance' do |api| %>
		<% api.item :returns => 'Control.TextArea', :signature => 'initialize(Element textarea)', :description => '' %>
		<% api.item :returns => 'string', :signature => 'getValue()', :description => 'Contents of the textarea.' %>
		<% api.item :returns => 'string', :signature => 'getSelection()', :description => 'Currently selected text.' %>
		<% api.item :returns => 'null', :signature => 'replaceSelection(string new_text)', :description => 'Replace the currently selected text.' %>
		<% api.item :returns => 'null', :signature => 'wrapSelection(string before_text, string after_text)', :description => 'Wrap the currently selected text.' %>
		<% api.item :returns => 'null', :signature => 'insertBeforeSelection(string text)', :description => '' %>
		<% api.item :returns => 'null', :signature => 'insertAfterSelection(string text)', :description => '' %>
		<% api.item :returns => 'null', :signature => 'collectFromEachSelectedLine(function callback [,string before_text [,string after_text]])', :description => 'Works like Enumerable.collect(). The callback will be called with each selected line, and the return array will be joined, and will replace the current selection.' %>
		<% api.item :returns => 'null', :signature => 'insertBeforeEachSelectedLine(string text [,string before_text [,string after_text]])', :description => '' %>
		<% api.item :returns => 'Element', :signature => 'element', :description => 'Textarea element.' %>
	<% end %>
	<% api_table 'Control.TextArea.Toolbar Instance' do |api| %>
		<% api.item :returns => 'Control.TextArea.ToolBar', :signature => 'initialize(Control.TextArea instance [,mixed toolbar_id])', :description => 'If no toolbar_id (Element or string id) is passed, a UL element is inserted before the textarea element in the Control.TextArea instance.' %>
		<% api.item :returns => 'null', :signature => 'attachButton(Element node, function callback)', :description => 'Attach a callback to a node that already exists on the page, callback will be bound to the Control.TextArea instance.' %>
		<% api.item :returns => 'null', :signature => 'addButton(string link_text, function callback [,Hash attributes])', :description => 'Creates an LI element with an A element inside and attaches it to the toolbar, callback will be bound to the Control.TextArea instance. If attributes are present they will be attached to the A element.' %>
		<% api.item :returns => 'Control.TextArea', :signature => 'textarea', :description => 'The Control.TextArea instance the toolbar is attached to.' %>
		<% api.item :returns => 'Element', :signature => 'container', :description => 'The toolbar Element.' %>		
	<% end %>
	<% events_table 'Events' do |events| %>
		<% events.item :signature => 'change(string new_value)', :description => 'This event exists because the \'change\' event on the textarea element is not fired when we modify the contents via this script. Observing \'change\' on the Control.TextArea instance instead will allow you to observe when the textarea changes from key presses, manipulation from Control.TextArea, and on cuts and pastes for browsers that allow it.' %>
	<% end %>
<% end %>